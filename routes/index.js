// routes/index.js
const express = require('express');
const router = express.Router();

/* Glossary data */
const glossaryData = [
  { id: '1', term: 'DevOps', description: 'DevOps is an integrated approach encompassing cultural principles, operational practices, and technological tools aimed at enhancing an organization`s capacity to swiftly deliver applications and services.', reference: 'Amazon, “What is DevOps? - Amazon Web Services (AWS),” Amazon Web Services, Inc., 2019. https://aws.amazon.com/devops/what-is-devops/' },
  { id: '2', term: 'Wall of confusion', description: 'The term refers to the situation where a particular group or team  in software development considers their job finished once they have completed their part of the process and handed it over to the next group. This handover might lack sufficient information, proper documentation, or clear communication, leading to confusion and inefficiencies for the next team.', reference: 'S. Kawaguchi, “The Wall of Confusion,” Medium, Feb. 12, 2022. https://levelup.gitconnected.com/the-wall-of-confusion-623057a4dd26' },
  { id: '3', term: 'SDLC', description: 'The Software Development Life Cycle (SDLC) is a structured and systematic process designed to create software that achieves optimal quality, efficiency, and cost-effectiveness within the shortest possible timeframe. By following a well-defined series of phases, SDLC enables organizations to efficiently produce top-notch software that undergoes rigorous testing and is fully prepared for deployment and operational use.', reference: 'A. Altvater, “What is SDLC? Understand the Software Development Life Cycle,” Stackify, Apr. 08, 2020. https://stackify.com/what-is-sdlc/' },
  { id: '4', term: 'Agile Development Methodology', description: 'It is a project management approach that consists of distributing the project into different phases into an efficient way and involves continuous collaboration and improvement from the team', reference: 'Atlassian, “Agile best practices and tutorials | Atlassian,” Atlassian, 2019. https://www.atlassian.com/agile' },
  { id: '5', term: 'Cloud computing', description: 'Cloud computing refers to accessing IT resources like computing power, storage, and databases via the Internet on a pay-as-you-go basis. It eliminates the need for maintaining data centers, providing a more flexible and cost-effective way to access and use technology resources.', reference: 'AWS, “What is Cloud Computing? - Amazon Web Services,” Amazon Web Services, Inc., 2022. https://aws.amazon.com/what-is-cloud-computing/' },
  { id: '6', term: 'Microservice', description: 'Microservices, or the microservice architecture, is a design approach for building applications by breaking them down into smaller, independent services. Each service can be deployed separately, allowing for flexibility and scalability. ', reference: 'C. Richardson, “Microservices.io,” microservices.io, 2017. https://microservices.io/' },
  { id: '7', term: 'Waterfall model', description: 'The Waterfall methodology is a prevalent project management approach characterized by a sequential and linear process. In this method, each stage of the project must be finished before progressing to the subsequent step.', reference: 'L. Hoory and C. Bottorff, “What Is Waterfall Methodology And How Do I Use It?,” Forbes Advisor, Oct. 26, 2021. https://www.forbes.com/advisor/business/what-is-waterfall-methodology/' },
  { id: '8', term: 'Technical Dept', description: 'Technical debt, also referred to as tech debt or code debt, occurs when development teams make intentional shortcuts or quick decisions to deliver a certain functionality or project faster. ', reference: '“What Is Technical Debt? | Definition and Examples,” www.productplan.com. https://www.productplan.com/glossary/technical-debt/' },
  { id: '9', term: 'Productivity in software development', description: 'Software productivity refers to the measure of how efficiently software is developed in relation to the value it provides and the resources invested. It involves assessing the functional value delivered to users, the complexity of the software being created, and the time and effort expended during development', reference: '“Software Productivity,” www.umsl.edu. https://www.umsl.edu/~sauterv/analysis/488_f02_papers/SoftwareProductivity.html#:~:text=Software%20productivity%20is%20the%20ratio%20between%20the%20functional%20value%20of (accessed Jul. 23, 2023).'},
  { id: '10', term: 'Automation', description: 'Automation involves leveraging technology to carry out tasks while reducing the need for direct human intervention. ', reference: 'IBM, “What is automation?,” www.ibm.com, 2021. https://www.ibm.com/topics/automation' },
  { id: '11', term: 'Minimum Viable Product', description: 'A minimum viable product (MVP) refers to a basic version of a product that includes just enough features to catch the interest of initial users, typically those who are quick to adopt new technologies. The main purpose of an MVP is to test and validate a product concept during the early stages of development.', reference: 'ProductPlan, “What is a Minimum Viable Product (MVP)? | A Product Mgmt Definition,” www.productplan.com, 2022. https://www.productplan.com/glossary/minimum-viable-product/'},
  { id: '12', term: 'Definition of Done', description: 'The "definition of done" (DoD) refers to the set of requirements or criteria that a software product needs to fulfill in order to be considered complete and ready for acceptance by users, customers, the team, or any system that uses it. The purpose of having a well-defined DoD is to ensure the quality of the product.', reference: '“The Definition of Done,” LeadingAgile, Feb. 08, 2017. https://www.leadingagile.com/2017/02/definition-of-done/'},
  { id: '13', term: 'Everything as Code', description: '"Everything as Code" (EaC) is an approach for handling IT infrastructure and creating systems and utilities that complement contemporary software applications. It involves transforming manual tasks and procedures typically carried out by individuals into software code.', reference: '“What ‘Everything as Code’ is and why it matters,” VentureBeat, Nov. 26, 2022. https://venturebeat.com/automation/what-everything-as-code-is-and-why-it-matters/ (accessed Aug. 06, 2023).'},
  { id: '14', term: 'Continuous integration (CI)', description: 'Continuous Integration (CI) is a method used in software development to streamline the process of combining code changes made by different developers into one cohesive software project.', reference: 'Atlassian, “What is Continuous Integration | Atlassian,” Atlassian, 2019. https://www.atlassian.com/continuous-delivery/continuous-integration'},
  { id: '15', term: 'Continuous delivery (CD)', description: 'Continuous Delivery is a strategy used in software development to streamline the process of getting code changes ready for release and deployment. This approach builds upon the foundation of continuous integration by automatically preparing code alterations for introduction into either a testing environment or directly into the production environment.', reference: '“What is Continuous Delivery? – Amazon Web Services,” Amazon Web Services, Inc. https://aws.amazon.com/devops/continuous-delivery/'},
  { id: '16', term: 'Infrastructure as Code', description: 'Infrastructure as code (IaC) is a practice rooted in DevOps principles that involves using a descriptive model, similar to code, to define and set up various aspects of a digital infrastructure. This can include elements like networks, virtual machines, load balancers, and how they are interconnected.', reference: 'mijacobs, “What is infrastructure as code (IaC)? - Azure DevOps,” learn.microsoft.com. https://learn.microsoft.com/en-us/devops/deliver/what-is-infrastructure-as-code'},
  { id: '17', term: 'Source code management', description: 'Source code management (SCM) is a method employed to monitor and record alterations made to a source code repository. It keeps a chronological record of modifications to a codebase and aids in addressing conflicts that arise when combining changes from multiple contributors.', reference: 'Atlassian, “Source Code Management | Atlassian Git Tutorial,” Atlassian. https://www.atlassian.com/git/tutorials/source-code-management#:~:text=Source%20code%20management%20(SCM)%20is'},
  { id: '18', term: 'Containerisation', description: `Containerization is a technique used in software deployment that packages an application's code together with all the necessary files and libraries required to run it on various types of infrastructure`, reference: '“What is Containerization? Containerization Explained - AWS,” Amazon Web Services, Inc. https://aws.amazon.com/what-is/containerization/'},
  { id: '19', term: 'Kubernetes', description: 'Kubernetes, often abbreviated as K8s, is a freely available system designed to automate the processes of deploying, scaling, and overseeing applications that are contained within containers.', reference: 'Kubernetes, “Production-Grade Container Orchestration,” Kubernetes.io, 2019. https://kubernetes.io/'},
  { id: '20', term: 'Docker', description: 'Docker is a comprehensive platform that offers a range of tools, services, reliable content, and automation capabilities. These resources can be utilized either independently or in combination to expedite the process of delivering applications in a secure manner.', reference: '“Why Docker,” Docker. https://www.docker.com/why-docker/'},
  { id: '21', term: 'Configuration', description: 'Configuration refers to how the various parts of a computer system are organized and combined to create a functional setup. This organization encompasses both the physical hardware components and the software elements that work together to form the complete system', reference: '“What is Configuration? - Definition from Techopedia,” Techopedia.com, 2019. https://www.techopedia.com/definition/4250/configuration'},
  { id: '22', term: 'Deployment', description: 'Deployment in software development involves transferring modifications or enhancements from one environment used for development and testing to another environment where the changes are made available for use by end-users or customers.', reference: '“What is deployment in software & web development?,” umbraco.com. https://umbraco.com/knowledge-base/deployment/'},
  { id: '23', term: 'Container', description: 'A container is a standardized software package that includes not only the application`s code but also all the necessary components it relies on. This packaging ensures that the application can run consistently and efficiently when moved from one computing environment to another.', reference: 'Docker, “What is a Container?,” Docker, 2023. https://www.docker.com/resources/what-container/'},
  { id: '24', term: 'Container Image', description: 'A Docker container image can be thought of as a compact and self-contained bundle of software that contains everything necessary to run a specific application. This includes the application`s source code, the runtime environment it requires, essential system tools, libraries, and configuration settings.', reference: 'Docker, “What is a Container?,” Docker, 2023. https://www.docker.com/resources/what-container/'},
  { id: '25', term: 'Cloud native application', description: 'Cloud-native applications are software applications designed to operate efficiently in cloud environments. They differ from traditional monolithic applications, where all functionalities are tightly integrated into a single structure.', reference: '“What is Cloud Native? - Cloud Native Explained - AWS,” Amazon Web Services, Inc. https://aws.amazon.com/what-is/cloud-native/'},
  { id: '26', term: 'Docker Compose', description: 'Docker Compose is a utility used for setting up and running complex Docker applications that consist of multiple containers. Instead of dealing with individual container configurations, it streamlines the process using a YAML file. In this file, you specify the services your application requires and how they should interact.', reference: 'Docker, “Overview of Docker Compose,” Docker Documentation, Feb. 10, 2020. https://docs.docker.com/compose/'},
  { id: '27', term: 'Declarative container management', description: 'Declarative container management is an approach where you define the desired state and configuration of your containerized applications using a clear and structured format, typically in a YAML file.', reference: 'Packtpub.com, 2022. https://subscription.packtpub.com/book/cloud-and-networking/9781800562387/3/ch03lvl1sec20/declarative-container-management-with-docker-compose (accessed Aug. 20, 2023).'},
  { id: '28', term: 'Dockerfile', description: 'A Dockerfile is a plain text file that includes a set of instructions representing the commands a user might use via the command line to construct a Docker image. These instructions provide a blueprint for how the image should be built, specifying the necessary steps and configurations to create a reproducible image.', reference: 'Docker Documentation, Aug. 08, 2019. https://docs.docker.com/engine/reference/builder/'},
  { id: '29', term: 'Multiple Container Apps', description: 'Multi-container apps are software applications composed of multiple containers that work together to deliver a complete solution. Each container within the application serves a specific function or microservice and they communicate with each other to achieve the application`s overall functionality.', reference: '“Multi container apps,” Docker Documentation, Aug. 22, 2023. https://docs.docker.com/get-started/07_multi_container/'},
  { id: '30', term: 'Docker Engine', description: 'Docker Engine is a widely adopted container runtime that operates on a variety of Linux distributions (like CentOS, Debian, Fedora, RHEL, and Ubuntu) as well as Windows Server systems. Its primary role is to provide the environment where containerized applications can run seamlessly. This means that applications packaged as containers can operate consistently across different types of infrastructure.', reference: '“The Industry-Leading Container Runtime,” Docker.https://www.docker.com/products/container-runtime/'},
  { id: '31', term: 'Container Infrastructure', description: 'A container infrastructure refers to the comprehensive set of tools, technologies, and services that enable the efficient deployment, management, and operation of containerized applications at scale.', reference: 'Davis, A. 2021, Bootstrapping Microservices with Docker, Kubernetes, and Terraform / Davis, Ashley, Manning Publications viewed 11 July 2022, <https://discovery.ebsco.com/linkprocessor/plink?id=db0e7980-bdfb-3d3b-b4e9-127c44a7aebb'},
  { id: '32', term: 'Volume in Docker', description: 'Volumes offer a universal approach across different operating systems to supply persistent data to Docker containers. While bind mounts depend on the host OS, volumes are entirely Docker-managed, ensuring their independence from the host operating system.', reference: 'Davis, A. 2021, Bootstrapping Microservices with Docker, Kubernetes, and Terraform / Davis, Ashley, Manning Publications viewed 11 July 2022, <https://discovery.ebsco.com/linkprocessor/plink?id=db0e7980-bdfb-3d3b-b4e9-127c44a7aebb'},
  { id: '33', term: 'Bridge Network', description: 'The default network driver in Docker is the bridge network. When you create a network without specifying a driver, Docker assumes you want to use this bridge network. It1s the recommended choice when you have multiple containers on the same Docker host that need to communicate with each other.', reference: 'Docker, 2022, Docker Documentation Website: https://docs.docker.com/'},
  { id: '34', term: 'Overlay Network', description: 'Overlay networks in Docker serve as a way to connect multiple Docker daemons together, allowing containers and services running on different hosts to communicate with each other. It is useful to establish communication between Docker swarm services, but helps to connect a swarm service with a standalone container or connect two standalone containers residing on separate Docker daemons.', reference: 'Docker, 2022, Docker Documentation Website: https://docs.docker.com/'},
  { id: '35', term: 'Macvlan Network', description: 'Macvlan networks provide a unique capability in Docker where you can assign a specific MAC address to a container, essentially making it look and behave like a physical device on your network. ', reference: 'Docker, 2022, Docker Documentation Website: https://docs.docker.com/'},
  { id: '36', term: 'Direct Messaging', description: 'Davis, A. 2021, Bootstrapping Microservices with Docker, Kubernetes, and Terraform / Davis, Ashley, Manning Publications viewed 11 July 2022, <https://discovery.ebsco.com/linkprocessor/plink?id=db0e7980-bdfb-3d3b-b4e9-127c44a7aebb', reference: 'Davis, A. 2021, Bootstrapping Microservices with Docker, Kubernetes, and Terraform / Davis, Ashley, Manning Publications viewed 11 July 2022, <https://discovery.ebsco.com/linkprocessor/plink?id=db0e7980-bdfb-3d3b-b4e9-127c44a7aebb'},
  { id: '37', term: 'Indirect Messaging', description: 'Indirect communication involves the use of an intermediary, typically a buffer, to temporarily store messages that have been sent. This approach maintains a distinct separation between the sender and the receiver, ensuring that messages are stored temporarily before being retrieved by the intended audience.', reference: 'Davis, A. 2021, Bootstrapping Microservices with Docker, Kubernetes, and Terraform / Davis, Ashley, Manning Publications viewed 11 July 2022, <https://discovery.ebsco.com/linkprocessor/plink?id=db0e7980-bdfb-3d3b-b4e9-127c44a7aebb'},
  { id: '38', term: 'RabbitMQ', description: 'RabbitMQ is a widely adopted open-source message broker that aids in application scalability by introducing a message queuing system between two applications. In this setup, messages originating from the publisher are routed through a RabbitMQ Queue, which subsequently forwards them to the designated consumer.', reference: '“Understanding RabbitMQ Queue & Messaging Simplified 101 - Learn | Hevo,” Apr. 22, 2022. https://hevodata.com/learn/rabbitmq-queue/#:~:text=RabbitMQ%20is%20a%20widely%20used'},
  { id: '39', term: 'Terraform', description: 'Terraform is a tool for infrastructure as code that empowers you to describe both cloud-based and on-premises resources using easily readable configuration files. These configuration files can be versioned, reused, and shared, providing a flexible and collaborative approach to managing infrastructure.', reference: 'Hashicorp, “What is Terraform | Terraform | HashiCorp Developer,” What is Terraform | Terraform | HashiCorp Developer. https://developer.hashicorp.com/terraform/intro'},
  { id: '40', term: 'Container registry', description: 'A container registry is a secure and centralized repository where you can create, save, and administer container images and related components for various types of container deployments.', reference: 'dlepow, “Azure Container Registry documentation,” learn.microsoft.com. https://learn.microsoft.com/en-us/azure/container-registry/'},

  // Add more terms and definitions as needed
];

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'SIT722', glossaries: glossaryData });
});

module.exports = router;

